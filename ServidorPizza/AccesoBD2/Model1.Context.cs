

//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------


namespace AccesoBD2
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class BDPizzaEntities : DbContext
{
    public BDPizzaEntities()
        : base("name=BDPizzaEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<CuentaUsuario> CuentaUsuarioSet { get; set; }

    public virtual DbSet<Empleado> EmpleadoSet { get; set; }

    public virtual DbSet<Direccion> DireccionSet { get; set; }

    public virtual DbSet<Rol> RolSet { get; set; }

    public virtual DbSet<Pedido> PedidoSet { get; set; }

    public virtual DbSet<Cliente> ClienteSet { get; set; }

    public virtual DbSet<Mesa> MesaSet { get; set; }

    public virtual DbSet<Estado> EstadoSet { get; set; }

    public virtual DbSet<Categoria> CategoriaSet { get; set; }

    public virtual DbSet<Producto> ProductoSet { get; set; }

    public virtual DbSet<Cuenta> CuentaSet { get; set; }

    public virtual DbSet<Telefono> TelefonoSet { get; set; }

    public virtual DbSet<ProvisionDirecta> ProvisionDirectaSet { get; set; }

    public virtual DbSet<Receta> RecetaSet { get; set; }

    public virtual DbSet<Provision> ProvisionSet { get; set; }

    public virtual DbSet<Ingrediente> IngredienteSet { get; set; }


    public virtual int InsertarCuentaDePedido(string id, Nullable<double> precioTotal, Nullable<double> subTotal, Nullable<double> iva, Nullable<double> descuento)
    {

        var idParameter = id != null ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(string));


        var precioTotalParameter = precioTotal.HasValue ?
            new ObjectParameter("PrecioTotal", precioTotal) :
            new ObjectParameter("PrecioTotal", typeof(double));


        var subTotalParameter = subTotal.HasValue ?
            new ObjectParameter("SubTotal", subTotal) :
            new ObjectParameter("SubTotal", typeof(double));


        var ivaParameter = iva.HasValue ?
            new ObjectParameter("Iva", iva) :
            new ObjectParameter("Iva", typeof(double));


        var descuentoParameter = descuento.HasValue ?
            new ObjectParameter("Descuento", descuento) :
            new ObjectParameter("Descuento", typeof(double));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarCuentaDePedido", idParameter, precioTotalParameter, subTotalParameter, ivaParameter, descuentoParameter);
    }


    public virtual int InsertarPedioDomicilio(Nullable<int> idCliente, Nullable<int> idPedido)
    {

        var idClienteParameter = idCliente.HasValue ?
            new ObjectParameter("IdCliente", idCliente) :
            new ObjectParameter("IdCliente", typeof(int));


        var idPedidoParameter = idPedido.HasValue ?
            new ObjectParameter("IdPedido", idPedido) :
            new ObjectParameter("IdPedido", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarPedioDomicilio", idClienteParameter, idPedidoParameter);
    }


    public virtual int LigarProductoConPedido(Nullable<int> idProducto, Nullable<int> idPedido)
    {

        var idProductoParameter = idProducto.HasValue ?
            new ObjectParameter("IdProducto", idProducto) :
            new ObjectParameter("IdProducto", typeof(int));


        var idPedidoParameter = idPedido.HasValue ?
            new ObjectParameter("IdPedido", idPedido) :
            new ObjectParameter("IdPedido", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LigarProductoConPedido", idProductoParameter, idPedidoParameter);
    }


    public virtual int LigarProvisionConPedido(Nullable<int> idProvision, Nullable<int> idPedido)
    {

        var idProvisionParameter = idProvision.HasValue ?
            new ObjectParameter("IdProvision", idProvision) :
            new ObjectParameter("IdProvision", typeof(int));


        var idPedidoParameter = idPedido.HasValue ?
            new ObjectParameter("IdPedido", idPedido) :
            new ObjectParameter("IdPedido", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LigarProvisionConPedido", idProvisionParameter, idPedidoParameter);
    }


    public virtual int InsertarPedido(Nullable<System.DateTime> fecha, string instruccionesEspeciales, Nullable<int> idEmpleado, Nullable<int> idEstado, string idCuenta)
    {

        var fechaParameter = fecha.HasValue ?
            new ObjectParameter("Fecha", fecha) :
            new ObjectParameter("Fecha", typeof(System.DateTime));


        var instruccionesEspecialesParameter = instruccionesEspeciales != null ?
            new ObjectParameter("InstruccionesEspeciales", instruccionesEspeciales) :
            new ObjectParameter("InstruccionesEspeciales", typeof(string));


        var idEmpleadoParameter = idEmpleado.HasValue ?
            new ObjectParameter("IdEmpleado", idEmpleado) :
            new ObjectParameter("IdEmpleado", typeof(int));


        var idEstadoParameter = idEstado.HasValue ?
            new ObjectParameter("IdEstado", idEstado) :
            new ObjectParameter("IdEstado", typeof(int));


        var idCuentaParameter = idCuenta != null ?
            new ObjectParameter("IdCuenta", idCuenta) :
            new ObjectParameter("IdCuenta", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarPedido", fechaParameter, instruccionesEspecialesParameter, idEmpleadoParameter, idEstadoParameter, idCuentaParameter);
    }


    public virtual int LigarClienteADireccion(Nullable<int> idDireccion, Nullable<int> idCliente)
    {

        var idDireccionParameter = idDireccion.HasValue ?
            new ObjectParameter("IdDireccion", idDireccion) :
            new ObjectParameter("IdDireccion", typeof(int));


        var idClienteParameter = idCliente.HasValue ?
            new ObjectParameter("IdCliente", idCliente) :
            new ObjectParameter("IdCliente", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LigarClienteADireccion", idDireccionParameter, idClienteParameter);
    }


    public virtual int RegistrarTelefono(string telefono, Nullable<int> idCliente)
    {

        var telefonoParameter = telefono != null ?
            new ObjectParameter("Telefono", telefono) :
            new ObjectParameter("Telefono", typeof(string));


        var idClienteParameter = idCliente.HasValue ?
            new ObjectParameter("IdCliente", idCliente) :
            new ObjectParameter("IdCliente", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistrarTelefono", telefonoParameter, idClienteParameter);
    }


    public virtual int RegistroDeClienteConDireccion(string nombre, string apellidoPaterno, string apellidoMaterno, string calle, string colonia, string numeroExterior, string numeroInterior)
    {

        var nombreParameter = nombre != null ?
            new ObjectParameter("Nombre", nombre) :
            new ObjectParameter("Nombre", typeof(string));


        var apellidoPaternoParameter = apellidoPaterno != null ?
            new ObjectParameter("ApellidoPaterno", apellidoPaterno) :
            new ObjectParameter("ApellidoPaterno", typeof(string));


        var apellidoMaternoParameter = apellidoMaterno != null ?
            new ObjectParameter("ApellidoMaterno", apellidoMaterno) :
            new ObjectParameter("ApellidoMaterno", typeof(string));


        var calleParameter = calle != null ?
            new ObjectParameter("Calle", calle) :
            new ObjectParameter("Calle", typeof(string));


        var coloniaParameter = colonia != null ?
            new ObjectParameter("Colonia", colonia) :
            new ObjectParameter("Colonia", typeof(string));


        var numeroExteriorParameter = numeroExterior != null ?
            new ObjectParameter("NumeroExterior", numeroExterior) :
            new ObjectParameter("NumeroExterior", typeof(string));


        var numeroInteriorParameter = numeroInterior != null ?
            new ObjectParameter("NumeroInterior", numeroInterior) :
            new ObjectParameter("NumeroInterior", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistroDeClienteConDireccion", nombreParameter, apellidoPaternoParameter, apellidoMaternoParameter, calleParameter, coloniaParameter, numeroExteriorParameter, numeroInteriorParameter);
    }


    public virtual int InsertarPedidoLocal(Nullable<int> idMesa, Nullable<int> idPedido)
    {

        var idMesaParameter = idMesa.HasValue ?
            new ObjectParameter("IdMesa", idMesa) :
            new ObjectParameter("IdMesa", typeof(int));


        var idPedidoParameter = idPedido.HasValue ?
            new ObjectParameter("IdPedido", idPedido) :
            new ObjectParameter("IdPedido", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarPedidoLocal", idMesaParameter, idPedidoParameter);
    }

}

}

